//
//  LoginViewController.swift
//  CleanTest
//
//  Created by Ahmed on 24/07/2023.
//  Copyright (c) 2023 Ahmed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SwiftValidator

protocol LoginDisplayLogic: class
{
    func displaySignIn(viewModel: Login.SignIn.ViewModel)
    func goToHome(viewModel: Login.RoutToHome.ViewModel)
}

class LoginViewController: BaseController , UITextFieldDelegate
{
    var interactor: LoginBusinessLogic?
    var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?
    let validator = Validator()
    
    
    // MARK: - IBOoutlets -
    @IBOutlet weak var txtEmail: UITextField!
    @IBOutlet weak var txtPassword: UITextField!
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = LoginInteractor()
        let presenter = LoginPresenter()
        let router = LoginRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        self.txtEmail.text = "qwr@gmail.com"
        self.txtPassword.text = "Shuja1234"
        addRulesOnTextFields()
    }
    
    // MARK: View TextFields Rules
    
    func addRulesOnTextFields()  {
        
        validator.registerField(txtEmail, rules: [EmailRule()])
        //validator.registerField(txtPassword, rules: [RequiredRule(message: "Field is Required!"), PasswordRule(message: "Must be 8 characters with 1 uppercase")])
        validator.registerField(txtPassword, rules: [PasswordRule(regex: "^[0-9]+$", message: "Password must be 8 digits.")])
        //ConfirmationRule
        //Phone Number Rule
        //CardExpiryYearRule
        //
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    @IBAction func btnLoginPressed(_ sender: Any) {
        
        validator.validate(self)
    }
    
    // MARK: Webservices Calls
    
    func signIn(request: Login.SignIn.Request) {
        interactor?.signIn(request: request)
    }
    
    // MARK: Validate single field
    // Don't forget to use UITextFieldDelegate
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
            validator.validateField(textField){ error in
                if error == nil {
                    // Field validation was successful
                } else {
                    // Validation error occurred
                }
            }
        return true
    }

    
}

extension LoginViewController : ValidationDelegate {
    func validationSuccessful() {
        
        let request = Login.SignIn.Request(email: txtEmail.text!, password: txtPassword.text!)
        signIn(request: request)
    }
    
    func validationFailed(_ errors: [(Validatable, ValidationError)]) {
        
        showAlertViewWithTitle(title: "Alert", message: errors.count > 0 ? errors[0].1.errorMessage : "validation failed")
    }
    
    
    
}

extension LoginViewController : LoginDisplayLogic {
    func displaySignIn(viewModel: Login.SignIn.ViewModel) {
        
        let title = viewModel.success! ? "Success!" : "Error!"
        
        if viewModel.success! {
            self.routToHome(viewModel)
        }
        else {
            print(title)
            print(viewModel.message ?? "")
            
            self.showAlertViewWithTitle(title: title, message: viewModel.message!)
        }
    }
    
    func goToHome(viewModel: Login.RoutToHome.ViewModel) {
        router?.routeToHome(segue: nil)
    }
    
    func routToHome(_ model :Login.SignIn.ViewModel) {
        let request = Login.RoutToHome.Request(userName: model.user!.userName!)
        interactor?.routToHome(request: request)
    }
}
